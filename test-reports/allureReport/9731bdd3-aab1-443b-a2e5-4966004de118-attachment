# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login Page Tests >> Invalid Login
- Location: C:\Users\Drew\Documents\VScode-workspace\playwright-automation-exercise\test\ui\tests\loginPageTests.spec.ts:8:5

# Error details

```
Error: locator.fill: Test ended.
Call log:
  - waiting for locator('email')
    - waiting for" https://www.automationexercise.com/" navigation to finish...
    - navigated to "https://www.automationexercise.com/"
    - waiting for" https://www.automationexercise.com/login" navigation to finish...
    - navigated to "https://www.automationexercise.com/login"

    at C:\Users\Drew\Documents\VScode-workspace\playwright-automation-exercise\test\ui\pages\loginPage.ts:28:35
    at LoginPage.enterCredentialsAndSubmit (C:\Users\Drew\Documents\VScode-workspace\playwright-automation-exercise\test\ui\pages\loginPage.ts:27:14)
    at C:\Users\Drew\Documents\VScode-workspace\playwright-automation-exercise\test\ui\tests\loginPageTests.spec.ts:13:25
```

# Page snapshot

```yaml
- banner:
  - link "Website for automation practice":
    - img "Website for automation practice"
  - list:
    - listitem:
      - link " Home"
    - listitem:
      - link " Products"
    - listitem:
      - link " Cart"
    - listitem:
      - link " Signup / Login"
    - listitem:
      - link " Test Cases"
    - listitem:
      - link " API Testing"
    - listitem:
      - link " Video Tutorials"
    - listitem:
      - link " Contact us"
- heading "Login to your account" [level=2]
- textbox "Email Address"
- textbox "Password"
- button "Login"
- heading "OR" [level=2]
- heading "New User Signup!" [level=2]
- textbox "Name"
- textbox "Email Address"
- button "Signup"
- contentinfo:
  - heading "Subscription" [level=2]
  - textbox "Your email address"
  - button ""
  - paragraph: Get the most recent updates from our site and be updated your self...
  - paragraph: Copyright © 2021 All rights reserved
- insertion
- insertion
```

# Test source

```ts
   1 | import { test, expect, Locator, Page, TestInfo } from '@playwright/test';
   2 | import * as dotenv from 'dotenv';
   3 | dotenv.config();
   4 |
   5 | export class LoginPage {
   6 |     page: Page;
   7 |     testInfo: TestInfo;
   8 |
   9 |     emailInput: Locator;
  10 |     passwordInput: Locator;
  11 |     loginButton: Locator;
  12 |     invalidEmailOrPasswordMessage: Locator;
  13 |
  14 |     constructor(page: Page, testInfo: TestInfo) {
  15 |         this.page = page;
  16 |         this.testInfo = testInfo;
  17 |
  18 |         //this.emailInput = this.page.locator('form').filter({ hasText: 'Login' }).getByPlaceholder('Email Address');
  19 |         this.emailInput = this.page.locator('email');
  20 |         this.passwordInput = this.page.getByRole('textbox', { name: 'password' });
  21 |         this.loginButton = this.page.getByRole('button', { name: 'Login' });
  22 |         this.invalidEmailOrPasswordMessage = this.page.getByText('Your email or password is');
  23 |     };
  24 |
  25 |
  26 |     async enterCredentialsAndSubmit(email: string, password: string) {
  27 |         test.step('Enter Credentials and Submit', async () => {
> 28 |             await this.emailInput.fill(email);
     |                                   ^ Error: locator.fill: Test ended.
  29 |             await this.passwordInput.fill(password);
  30 |             await this.loginButton.click();
  31 |         }); 
  32 |     }
  33 |
  34 |     async enterValidCredentialsAndSubmit() {
  35 |         let email = "";
  36 |         let password = "";
  37 |         if (this.testInfo.project.name === 'production-validation') {
  38 |             email = process.env.PROD_EMAIL as string;
  39 |             password = process.env.PROD_PASSWORD as string
  40 |         } else if (this.testInfo.project.name === 'qa-chromium') {
  41 |             email = process.env.QA_CHROMIUM_EMAIL as string;
  42 |             password = process.env.QA_CHROMIUM_PASSWORD as string
  43 |         } else if (this.testInfo.project.name === 'qa-firefox') {
  44 |             email = process.env.QA_FIREFOX_EMAIL as string;
  45 |             password = process.env.QA_FIREFOX_PASSWORD as string
  46 |         } else if (this.testInfo.project.name === 'qa-webkit') {
  47 |             email = process.env.QA_WEBKIT_EMAIL as string;
  48 |             password = process.env.QA_WEBKIT_PASSWORD as string
  49 |         } else {
  50 |             test.fail(true, "Login Setup Issue");
  51 |         }
  52 |         
  53 |         await this.enterCredentialsAndSubmit(email, password);
  54 |     }
  55 |
  56 |     async verifyIncorrectEmailOrPasswordMessageDisplays() {
  57 |         await test.step('Verify Incorrect Email Or Password Message Displays', async () => {
  58 |             await expect(this.invalidEmailOrPasswordMessage).toBeVisible({ timeout: 10000 });
  59 |         });
  60 |     };
  61 |
  62 | }
```