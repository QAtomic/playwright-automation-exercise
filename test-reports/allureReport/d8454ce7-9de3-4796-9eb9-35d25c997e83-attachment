# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Customer Registration Tests >> New Customer Registration
- Location: C:\Users\Drew\Documents\VScode-workspace\playwright-automation-exercise\test\ui\tests\customerRegistrationTests.spec.ts:12:5

# Error details

```
Error: locator.check: Test timeout of 15000ms exceeded.
Call log:
  - waiting for getByRole('radio', { name: 'Mr.' })

    at C:\Users\Drew\Documents\VScode-workspace\playwright-automation-exercise\test\ui\pages\signupPage.ts:19:65
    at SignupPage.enterAccountInformationAndAddressInformationAndClickCreateAccount (C:\Users\Drew\Documents\VScode-workspace\playwright-automation-exercise\test\ui\pages\signupPage.ts:15:14)
    at C:\Users\Drew\Documents\VScode-workspace\playwright-automation-exercise\test\ui\tests\customerRegistrationTests.spec.ts:21:26
```

# Page snapshot

```yaml
- banner:
  - link "Website for automation practice":
    - img "Website for automation practice"
  - list:
    - listitem:
      - link " Home"
    - listitem:
      - link " Products"
    - listitem:
      - link " Cart"
    - listitem:
      - link " Signup / Login"
    - listitem:
      - link " Test Cases"
    - listitem:
      - link " API Testing"
    - listitem:
      - link " Video Tutorials"
    - listitem:
      - link " Contact us"
- heading "Login to your account" [level=2]
- textbox "Email Address"
- textbox "Password"
- button "Login"
- heading "OR" [level=2]
- heading "New User Signup!" [level=2]
- textbox "Name": Playwright Test
- textbox "Email Address": Test@Playwright.com
- paragraph: Email Address already exist!
- button "Signup"
- contentinfo:
  - heading "Subscription" [level=2]
  - textbox "Your email address"
  - button ""
  - paragraph: Get the most recent updates from our site and be updated your self...
  - paragraph: Copyright © 2021 All rights reserved
- insertion
- insertion
```

# Test source

```ts
   1 | import { test, expect, Locator, Page, TestInfo } from '@playwright/test';
   2 | import { getRandomDateBetweenDaysAgo } from '../../utils/dateUtils';
   3 | import { randomNumberBetween } from '../../utils/numberUtils';
   4 | import { BasePage } from '../basePage/basePage';
   5 |
   6 |
   7 | export class SignupPage extends BasePage {
   8 |
   9 |     constructor(page: Page, testInfo: TestInfo) {
  10 |         super(page, testInfo);
  11 |     };
  12 |
  13 |
  14 |     async enterAccountInformationAndAddressInformationAndClickCreateAccount() {
  15 |         test.step("Enter Account Information And Address Information And Click Create Account", async () => {
  16 |             const randomBirthDate = getRandomDateBetweenDaysAgo(6570,32850);
  17 |             const randomPhoneNumber = randomNumberBetween(1111111111, 9999999999);
  18 |
> 19 |             await this.page.getByRole('radio', { name: 'Mr.' }).check();
     |                                                                 ^ Error: locator.check: Test timeout of 15000ms exceeded.
  20 |             await this.page.getByRole('textbox', { name: 'Password *' }).fill('Test@123');
  21 |             await this.page.locator('#days').selectOption(randomBirthDate.day.toString());
  22 |             await this.page.locator('#months').selectOption(randomBirthDate.month.toString());
  23 |             await this.page.locator('#years').selectOption(randomBirthDate.year.toString());
  24 |             await this.page.getByRole('textbox', { name: 'First name *' }).fill('Playwright');
  25 |             await this.page.getByRole('textbox', { name: 'Last name *' }).fill('Test');
  26 |             await this.page.getByRole('textbox', { name: 'Address * (Street address, P.' }).fill('85 Whitewood Dr');
  27 |             await this.page.getByLabel('Country *').selectOption('United States');
  28 |             await this.page.getByRole('textbox', { name: 'State *' }).fill('PA');
  29 |             await this.page.getByRole('textbox', { name: 'City * Zipcode *' }).fill('Levittown');
  30 |             await this.page.locator('#zipcode').fill('19057');
  31 |             await this.page.getByRole('textbox', { name: 'Mobile Number *' }).fill(randomPhoneNumber.toString());
  32 |             await this.page.getByRole('button', { name: 'Create Account' }).click();
  33 |         });
  34 |     }
  35 |
  36 |
  37 | }
```